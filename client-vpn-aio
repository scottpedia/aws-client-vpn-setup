#!/usr/bin/env python3
#
# Copyright 2020-2022 Scott X. Liang and other contributors.
# To contact the author, please send emails to scott.liang@pm.me.
#
# This file is part of aws-client-vpn-setup.
#
# aws-client-vpn-setup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# aws-client-vpn-setup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with aws-client-vpn-setup.  If not, see <https://www.gnu.org/licenses/>.

import time
from sys import stdout
import boto3
import sys
import traceback
import string
import random
import subprocess
from pathlib import Path
from json import load, dumps
import os
import glob

client_ec2 = None
client_acm = None
client_cf = None

PROPERTIES = {
    "friendlyName": "",
    "isSplitTunneled": False,
    "isApIsolated": True,
    "region": "",
    "cloudformationStackId": "",
    "clientVpnEndpointId": "",
    "serverCertificateArn": "",
    "clientCertificateArn": "",
    "subnetId": "",
    "dateOfCreation": "",
    "networkProtocol": "",
}

REGION_NAME_MAPPING = {
    "us-east-1": "virginia-us",
    "us-east-2": "ohio-us",
    "us-west-1": "california-us",
    "us-west-2": "oregon-us",
    "ap-east-1": "hongkong-hk",
    "ap-south-1": "mumbai-in",
    "ap-northeast-2": "seoul-kr",
    "ap-southeast-1": "singapore-sg",
    "ap-southeast-2": "sydney-au",
    "ap-northeast-1": "tokyo-jp",
    "ca-central-1": "montreal-ca",
    "eu-central-1": "frankfurt-de",
    "eu-west-1": "dublin-ie",
    "eu-south-1": "milan-it",
    "eu-west-3": "paris-fr",
    "eu-west-2": "london-uk",
    "eu-north-1": "stockholm-no",
    "me-south-1": "bahrain-bh",
}

TEMPLATE_CONTENT = ""
CLIENT_CERT = ""
CLIENT_KEY = ""
HELP_SCRIPT = """
Usage: ./client-vpn-aio [command] -f [the_config_file]
The python script to deploy and manage the vpn service based on AWS Client VPN Endpoints.

NOTE: PLEASE HAVE YOUR AWS CLI SETUP WITH YOUR AWS ACCOUNT BEFORE YOU RUN THIS SCRIPT.
      THE SCRIPT WILL NOT RUN WITHOUT AN AWS ACCOUNT SETUP WITH THE CLI.

***TO DEPLOY A NEW VPN SERVICE, please run the script without any command.***

***TO MANAGE AN EXISTING ENDPOINT, please use the following commands:***
    status    :   Output the current status of the specified VPN Endpoint.
    on        :   Turn on the VPN
    off       :   Turn off the VPN
    toggle    :   Toggle the VPN
    terminate :   Terminate the selected OVPN setup on AWS.
   *help      :   Output the help

    -f [Filename] (Optional)
    You can use the optional -f flag to specify the file which contains the profile of a specific VPN deployment(*.ovpnsetup).
    Thus you can have multiple deployments active at the same time, and manage each of them with its profile.
    If the file is not speficied, the program will automatically look for one under the current working directory.
    If multiple profiles are found under the CWD, the most recent one will be used.
"""

# *** THE MANAGEMENT CODE SECTION STARTS ***


def get_association_state():
    response = client_ec2.describe_client_vpn_endpoints(
        ClientVpnEndpointIds=[
            PROPERTIES["clientVpnEndpointId"],
        ]
    )
    if len(response["ClientVpnEndpoints"]) > 0:
        return response["ClientVpnEndpoints"][0]["Status"]["Code"]
    else:
        raise Exception("No existing client vpn endpoint found.")


# This function returns True if the endpoint is associated with the target network, vice versa.
def is_associated():
    state = get_association_state()
    if state == "pending-associate":  # When the subnet is NOT associated
        return False
    elif state == "available":  # When the subnet is associated
        return True
    # the possibility of an endpoint neither assiciated nor available.(Unexpected state)
    else:
        raise Exception("An unexpected state detected.")


def associate_target_network() -> None:
    response = client_ec2.associate_client_vpn_target_network(
        ClientVpnEndpointId=PROPERTIES["clientVpnEndpointId"],
        SubnetId=PROPERTIES["subnetId"],
    )
    if response["Status"]["Code"] != "associating":
        raise Exception(
            "Unexpected association state detected : {}".format(
                response["Status"]["Code"]
            )
        )


def create_internet_routing_rule() -> None:
    response = client_ec2.create_client_vpn_route(
        ClientVpnEndpointId=PROPERTIES["clientVpnEndpointId"],
        # The CIDR block that allows the traffic in and out of the public internet.
        DestinationCidrBlock="0.0.0.0/0",
        TargetVpcSubnetId=PROPERTIES["subnetId"],
    )
    if response["Status"]["Code"] != "creating":
        raise Exception(
            "Unexpected state detected after creating the route : {}".format(
                response["Status"]["Code"]
            )
        )


def create_link_local_routing_rule() -> None:
    response = client_ec2.create_client_vpn_route(
        ClientVpnEndpointId=PROPERTIES["clientVpnEndpointId"],
        # The CIDR block that allows the traffic to travel within the endpoint subnet(between connected clients)
        DestinationCidrBlock="10.0.0.0/16",
        TargetVpcSubnetId='local',
    )
    if response["Status"]["Code"] != "creating":
        raise Exception(
            "Unexpected state detected after creating the route : {}".format(
                response["Status"]["Code"]
            )
        )


def get_current_association_id():
    response = client_ec2.describe_client_vpn_target_networks(
        ClientVpnEndpointId=PROPERTIES["clientVpnEndpointId"]
    )
    if len(response["ClientVpnTargetNetworks"]) > 0:
        return response["ClientVpnTargetNetworks"][0]["AssociationId"]
    else:
        raise Exception(
            "No association ID found, probably there is no terget network associated right now."
        )


def disassociate_target_network() -> None:
    associationId = get_current_association_id()
    response = client_ec2.response = client_ec2.disassociate_client_vpn_target_network(
        ClientVpnEndpointId=PROPERTIES["clientVpnEndpointId"],
        AssociationId=associationId,
    )
    if response["Status"]["Code"] != "disassociating":
        raise Exception(
            "Unexpected status detected after disassociation : {}".format(
                response["Status"]["Code"]
            )
        )


def turn_on() -> None:
    print(
        f"Associating the target subnet({PROPERTIES['subnetId']}) and creating the new route(0.0.0.0/0)."
    )
    print("... ... ...")
    associate_target_network()
    print("... ... ...")
    create_internet_routing_rule()
    if PROPERTIES['isApIsolated'] == False:
        create_link_local_routing_rule()
    print("Done.\n")

    print("The target subnet is being associated...")
    print(
        "The program will check the association state every 10 seconds. The association generally takes 10 minutes to complete..."
    )
    print("The timeout is 20 minutes.")
    for _i in range(100):
        print(">", end="", flush=True)
        if get_association_state() != "pending-associate":
            print(
                "\nThe target subnet is now associated with the endpoint. You can now connect to the endpoint with your client software.\n"
            )
            break
        time.sleep(10)
    else:
        print("Timeout. Program exits.\n")


def get_status() -> None:
    print(
        "Getting the association state of the client vpn endpoint : \n{}".format(
            PROPERTIES["clientVpnEndpointId"]
        )
    )
    print("... ... ...")
    print(
        "Currently, and state of association is : \n{}".format(
            get_association_state())
    )
    print("Done.")


def disassociate() -> None:
    print(
        f"Disassociating the target subnet({PROPERTIES['subnetId']})\nfrom the client vpn endpoint({PROPERTIES['clientVpnEndpointId']})."
    )
    print("... ... ...")
    disassociate_target_network()
    print("Done.")


def terminate_endpoint() -> None:
    print(
        "We are now going to terminate endpoint deployment {} \nlocated at {}".format(
            PROPERTIES["friendlyName"], PROPERTIES["region"]
        )
    )
    while True:
        yon = input("DO WE PROCEED? <Yy for yes, Nn for no> ")
        if yon.lower() == "y":
            break
        elif yon.lower() == "n":
            sys.exit(0)
        else:
            print("Unexpected answer detected. Please enter again.")
    if is_associated() == True:
        print("The endpoint is already associated. Disassociating...")
        disassociate()
        print("The Endpoint is now ready to be terminated...")
        print("Giving it 30 seconds to disassociate...")
        time.sleep(30)
    print("\nTerminating the cloudformation deployment...")
    client_cf.delete_stack(
        StackName="ovpn-{}".format(PROPERTIES["friendlyName"]))
    for _ in range(60):
        print(">", end="", flush=True)
        if (
            client_cf.describe_stacks(StackName=PROPERTIES["cloudformationStackId"])[
                "Stacks"
            ][0]["StackStatus"]
            == "DELETE_COMPLETE"
        ):
            print("\nDone\n")
            break
        time.sleep(10)
    else:
        print("Timeout. Failed to delete the cloudformation stack.", file=sys.stderr)
        raise TimeoutError()

    print("Deleting ACM Certificates...")
    client_acm.delete_certificate(
        CertificateArn=PROPERTIES["serverCertificateArn"])
    client_acm.delete_certificate(
        CertificateArn=PROPERTIES["clientCertificateArn"])
    print("Done.\n")

    print("Deleting ovpn profiles...")
    subprocess.run(
        f"rm -rf {REGION_NAME_MAPPING[PROPERTIES['region']]}-{PROPERTIES['friendlyName']}.ovpn {REGION_NAME_MAPPING[PROPERTIES['region']]}-{PROPERTIES['friendlyName']}.ovpnsetup".split(
            " "
        ),
        check=True,
    )
    print("Done.\n")
    print(f"Successfully terminated {PROPERTIES['friendlyName']}.")


def get_configuration():
    global PROPERTIES
    if sys.argv.count("-f") is 0:
        print("No filename specified, looking up the lastest one under the CWD...")
        # no profile specified.
        files = glob.glob(f"{os.getcwd()}/*.ovpnsetup")
        if len(files) == 0:
            print(
                "No .ovpnsetup file found under the current working directory.",
                file=sys.stderr,
            )
            return 1
        else: 
            configs = []
            for f in files:
                configs.append(load(open(f, "r")))
            configs.sort(key=lambda x: x["dateOfCreation"])
            theLatestConfig = configs[-1]
            PROPERTIES = theLatestConfig
            print("Profile obtained.\nDone.\n")
            return 0
    else:
        # profile specified via -f flag.
        try:
            fileName = sys.argv[sys.argv.index("-f") + 1]
        except IndexError:
            print("No filename found.", file=sys.stderr)
            traceback.print_exc()
            sys.exit(1)
        try:
            PROPERTIES = load(open(fileName, "r"))
        except:
            print("Failed to parse the profile specified.", file=sys.stderr)
            traceback.print_exc()
            sys.exit(1)
        print("Profile obtained.\nDone.\n")
        return 0


def manage():
    # The function is executed when the user wants to manage an existing VPN service.
    global PROPERTIES
    commandInput = sys.argv[1]
    if commandInput == "status":
        get_status()
    elif commandInput == "off":
        disassociate()
    elif commandInput == "on":
        turn_on()
    elif commandInput == "toggle":
        if get_association_state() == "pending-associate":
            turn_on()
        else:
            disassociate()
    elif commandInput == "terminate":
        terminate_endpoint()
    elif commandInput == "help":
        print(HELP_SCRIPT)
    else:
        raise Exception(
            f'No such command as "{commandInput}" is available. Please check you input and try again.\n{HELP_SCRIPT}'
        )


# *** THE MANAGEMENT CODE SECTION ENDS ***
# *** THE DEPLOYMENT CODE SECTION STARTS ***


def get_properties():
    # The function gets the required deployment settings from the user.
    global PROPERTIES
    print("Getting user settings...")
    friendlyName = input(
        "Please give your new VPN Service a friendly name:\n[Default: auto-generated random characters]> "
    )
    if friendlyName == "":
        print("Empty string detected! Your VPN friendly name is now:")
        friendlyName = "".join(
            random.SystemRandom().choice(string.ascii_letters + string.digits)
            for _ in range(10)
        )
        print(friendlyName)
    else:
        print("Your current VPN friendly name is:\n{}".format(friendlyName))
    PROPERTIES["friendlyName"] = friendlyName

    while True:
        isSplitTunneled = input(
            "Do you want to enable split tunnel for your VPN?\n[Default: Nn] <Yy or Nn> "
        ).capitalize()
        if isSplitTunneled == "Y":
            PROPERTIES["isSplitTunneled"] = True
            print("The VPN will be split-tunnel enabled.")
            break
        elif isSplitTunneled == "N":
            PROPERTIES["isSplitTunneled"] = False
            print("The VPN will be split-tunnel disabled.")
            break
        elif isSplitTunneled == "":
            PROPERTIES["isSplitTunneled"] = False
            print("The VPN will be split-tunnel disabled as default.")
            break
        else:
            print("Unrecognized input, please try again!")

    while True:
        isApIsolated = input(
            "Do you want connected clients to be able to reach each others over within the endpoint subnet?\n[Default: Nn] <Yy or Nn> "
        ).capitalize()
        if isApIsolated == "Y":
            PROPERTIES["isApIsolated"] = False
            print("The VPN will be having a link-local route.")
            break
        elif isApIsolated == "N":
            print("The VPN will NOT be having a link-local route.")
            break
        elif isApIsolated == "":
            print("The VPN will NOT be having a link-local route by default.")
            break
        else:
            print("Unrecognized input, please try again!")

    networkProtocol = input(
        "Please choose the network protocol you want the server to use.\n- TCP: works better in an unstable networking environment, with a lower speed.\n - UDP: works better in a stable networking environment, with high speed.\n[Default: udp] <udp or tcp> "
    ).lower()
    while True:
        if networkProtocol == "udp":
            PROPERTIES["networkProtocol"] = "udp"
            print("The VPN will use UDP protocol.")
            break
        elif networkProtocol == "tcp":
            PROPERTIES["networkProtocol"] = "tcp"
            print("The VPN will use TCP protocol.")
            break
        elif networkProtocol == "":
            PROPERTIES["networkProtocol"] = "udp"
            print("The VPN will use UDP protocol by default.")
            break
        else:
            print("Unrecognized input, please try again!")
            networkProtocol = input(
                "Please choose the network protocol you want the server to use.\n- TCP: works better in an unstable networking environment, with a lower speed.\n - UDP: works better in a stable networking environment, with high speed.\n[Default: udp] <udp or tcp> "
            ).lower()

    print("The following AWS regions support Client VPN Endpoint:")
    availableRegions = """
    1. US East (N. Virginia)
    2. US East (Ohio)
    3. US West (N. California)
    4. US West (Oregon)
    5. Asia Pacific (Hong Kong)
    6. Asia Pacific (Mumbai)
    7. Asia Pacific (Seoul)
    8. Aisa Pacific (Singapore)
    9. Aisa Pacific (Sydney)
    10. Asia Pacific (Tokyo)
    11. Canada (Central)
    12. Europe (Frankfurt)
    13. Europe (Ireland)
    14. Europe (Milan)
    15. Europe (Paris)
    16. Europe (London)
    17. Europe (Stockholm)
    18. Middle East (Bahrain)
    """
    regionsMapping = [
        "",
        "us-east-1",
        "us-east-2",
        "us-west-1",
        "us-west-2",
        "ap-east-1",
        "ap-south-1",
        "ap-northeast-2",
        "ap-southeast-1",
        "ap-southeast-2",
        "ap-northeast-1",
        "ca-central-1",
        "eu-central-1",
        "eu-west-1",
        "eu-south-1",
        "eu-west-3",
        "eu-west-2",
        "eu-north-1",
        "me-south-1",
    ]
    print(availableRegions)
    while True:
        regionNumber = input(
            "Please select one from the list above. Enter the number only:\n[no Default] <1-{}> ".format(
                len(regionsMapping) - 1
            )
        )
        try:
            regionNumberInteger = int(regionNumber)
            if (
                regionNumberInteger <= (len(regionsMapping) - 1)
                and regionNumberInteger >= 1
            ):
                PROPERTIES["region"] = regionsMapping[regionNumberInteger]
            else:
                raise Exception(
                    "Value ({}) not found. Please re-enter your region number.".format(
                        regionNumber
                    )
                )
        except Exception as e:
            print(e)
        else:
            print("Your choice is {}".format(PROPERTIES["region"]))
            break

    print("Please review your settings:\n {}".format(dumps(PROPERTIES, indent=1)))
    if (
        input("Please press ENTER to proceed, or any other key + ENTER to abort.\n> ").capitalize()
        != ""
    ):
        print("Abort.")
        sys.exit(1)


def generate_credentials():
    # This function first clones https://github.com/openvpn/easy-rsa.git and generates certificates for both server and clients.
    # And saves it under the current directory.
    # After that, it uploads the credentials to ACM.
    global CLIENT_CERT
    global CLIENT_KEY
    global PROPERTIES
    print("Generating credentials...")
    input(
        "In the process, you will be prompted to enter the DN for your CA. You can just leave it blank and press enter.\nPlease type enter to confirm > "
    )
    commandsToRun = [
        "git clone https://github.com/openvpn/easy-rsa.git .easy-rsa-{}".format(
            PROPERTIES["friendlyName"]
        ),
        ".easy-rsa-{}/easyrsa3/easyrsa init-pki".format(
            PROPERTIES["friendlyName"]),
        ".easy-rsa-{}/easyrsa3/easyrsa build-ca nopass".format(
            PROPERTIES["friendlyName"]
        ),
        ".easy-rsa-{}/easyrsa3/easyrsa build-server-full server-{} nopass".format(
            PROPERTIES["friendlyName"], PROPERTIES["friendlyName"]
        ),
        ".easy-rsa-{}/easyrsa3/easyrsa build-client-full {}.domain.tld nopass".format(
            PROPERTIES["friendlyName"], PROPERTIES["friendlyName"]
        ),
        "mkdir {}.ovpnsetup".format(PROPERTIES["friendlyName"]),
        "cp pki/ca.crt ./{}.ovpnsetup".format(PROPERTIES["friendlyName"]),
        "cp pki/issued/server-{}.crt ./{}.ovpnsetup".format(
            PROPERTIES["friendlyName"], PROPERTIES["friendlyName"]
        ),
        "cp pki/private/server-{}.key ./{}.ovpnsetup".format(
            PROPERTIES["friendlyName"], PROPERTIES["friendlyName"]
        ),
        "cp pki/issued/{}.domain.tld.crt ./{}.ovpnsetup".format(
            PROPERTIES["friendlyName"], PROPERTIES["friendlyName"]
        ),
        "cp pki/private/{}.domain.tld.key ./{}.ovpnsetup".format(
            PROPERTIES["friendlyName"], PROPERTIES["friendlyName"]
        ),
        "rm -rf .easy-rsa-{}".format(PROPERTIES["friendlyName"]),
        "rm -rf pki",
    ]
    for command in commandsToRun:
        subprocess.run(command.split(" "), stdout=sys.stdout, check=True)
    else:
        print("Done.\n")

    # pre-load the certificates into the memory.
    print("Retrieving the certificates...")
    CA_CERT = (
        open(f"./{PROPERTIES['friendlyName']}.ovpnsetup/ca.crt", "r")
        .read()
        .encode("UTF-8")
    )
    SERVER_CERT = (
        open(
            f"./{PROPERTIES['friendlyName']}.ovpnsetup/server-{PROPERTIES['friendlyName']}.crt",
            "r",
        )
        .read()
        .encode("UTF-8")
    )
    SERVER_KEY = (
        open(
            f"./{PROPERTIES['friendlyName']}.ovpnsetup/server-{PROPERTIES['friendlyName']}.key",
            "r",
        )
        .read()
        .encode("UTF-8")
    )
    CLIENT_CERT = (
        open(
            f"./{PROPERTIES['friendlyName']}.ovpnsetup/{PROPERTIES['friendlyName']}.domain.tld.crt",
            "r",
        )
        .read()
        .encode("UTF-8")
    )
    CLIENT_KEY = (
        open(
            f"./{PROPERTIES['friendlyName']}.ovpnsetup/{PROPERTIES['friendlyName']}.domain.tld.key",
            "r",
        )
        .read()
        .encode("UTF-8")
    )
    print("Done.\n")

    # Delete the temporary configuration folder. (This process is unnecessary and complicated. It should be later simplified.)
    subprocess.run(
        f"rm -rf {PROPERTIES['friendlyName']}.ovpnsetup".split(" "), check=True
    )

    # Upload the certificates.
    # Import Server Certificate
    print("Uploading the certificates...")
    PROPERTIES["serverCertificateArn"] = client_acm.import_certificate(
        Certificate=SERVER_CERT,
        PrivateKey=SERVER_KEY,
        CertificateChain=CA_CERT,
        Tags=[{"Key": "deploymentFriendlyName",
               "Value": PROPERTIES["friendlyName"]}],
    )["CertificateArn"]
    # Import Client Certificate
    PROPERTIES["clientCertificateArn"] = client_acm.import_certificate(
        Certificate=CLIENT_CERT,
        PrivateKey=CLIENT_KEY,
        CertificateChain=CA_CERT,
        Tags=[{"Key": "deploymentFriendlyName",
               "Value": PROPERTIES["friendlyName"]}],
    )["CertificateArn"]
    print("Done.\n")


# This function downloads the cloudformation template if one is not found under the CWD.
def download_cloudformation_template():
    cfTemplate = Path("cloudformation-template.json")
    global TEMPLATE_CONTENT
    for _ in range(3):
        if cfTemplate.exists():
            TEMPLATE_CONTENT = cfTemplate.open("r").read()
            break
        else:
            subprocess.run(
                "wget 'https://raw.githubusercontent.com/Scottpedia/vpn-toggle-utility/master/cloudformation-template.json' -O cloudformation-template.json".split(
                    " "
                ),
                check=True,
                stdout=sys.stdout,
            )
    else:
        raise Exception(
            "Failed to find and download the cloudformation template.")


def deploy_cloudformation_template():
    global PROPERTIES
    print("Now we start to deploy the actual thing on AWS.")
    print("Deploying...")
    response = client_cf.create_stack(
        StackName="ovpn-{}".format(PROPERTIES["friendlyName"]),
        TemplateBody=TEMPLATE_CONTENT,
        Parameters=[
            {
                "ParameterKey": "ClientCertificateArn",
                "ParameterValue": PROPERTIES["clientCertificateArn"],
            },
            {
                "ParameterKey": "ServerCertificateArn",
                "ParameterValue": PROPERTIES["serverCertificateArn"],
            },
            {
                "ParameterKey": "isSplitTunnelled",
                "ParameterValue": str(PROPERTIES["isSplitTunneled"]).lower(),
            },
            {
                "ParameterKey": "FriendlyName",
                "ParameterValue": PROPERTIES["friendlyName"],
            },
            {
                "ParameterKey": "NetworkProtocol",
                "ParameterValue": PROPERTIES["networkProtocol"],
            },
        ],
        TimeoutInMinutes=15,
        Tags=[{"Key": "deploymentFriendlyName",
               "Value": PROPERTIES["friendlyName"]}],
    )
    PROPERTIES["cloudformationStackId"] = response["StackId"]
    print(
        "Deployment initiated. The program will refresh every 3 seconds to check the progress of deployment. The timeout is 5 mimutes."
    )
    for _ in range(100):
        time.sleep(3)
        response = client_cf.describe_stacks(
            StackName="ovpn-{}".format(PROPERTIES["friendlyName"])
        )
        if response["Stacks"][0]["StackStatus"] == "CREATE_COMPLETE":
            print("Stack is successfully created!")
            outputs = response["Stacks"][0]["Outputs"]
            outputs.sort(key=lambda x: x["OutputKey"])
            PROPERTIES["clientVpnEndpointId"] = outputs[0]["OutputValue"]
            PROPERTIES["subnetId"] = outputs[1]["OutputValue"]
            break
        elif response["Stacks"][0]["StackStatus"] == "CREATE_FAILED" or response["Stacks"][0]["StackStatus"] == "ROLLBACK_IN_PROGRESS":
            print("The stack deployment failed.")
            raise Exception("The stack deployment failed.")
        elif response["Stacks"][0]["StackStatus"] == "CREATE_IN_PROGRESS":
            print(">", end="", flush=True)  # As a progress bar
        else:
            raise Exception("Unexpected stack status \"{}\" detected.".format(response["Stacks"][0]["StackStatus"]))
    else:
        raise Exception("Deployment timed out.")


def download_connection_profile():
    print("Exporting the connection profile...")
    connConfig = client_ec2.export_client_vpn_client_configuration(
        ClientVpnEndpointId=PROPERTIES["clientVpnEndpointId"]
    )
    print("Done.\n")

    print("Inserting client-side credentials...")
    print("Processing...")
    conn_fragments = connConfig["ClientConfiguration"].split("\n")

    conn_fragments[3] = (
        "remote "
        + "".join(
            random.SystemRandom().choice(string.ascii_letters + string.digits)
            for _ in range(20)
        ).lower()
        + "."
        + conn_fragments[3].split(" ")[1]
        + " 443"
    )

    conn_fragments.insert(-2, "<key>")
    for _i in CLIENT_KEY.decode("UTF-8").split("\n"):
        conn_fragments.insert(-2, _i)
    conn_fragments.insert(-2, "</key>")

    conn_fragments.insert(-2, "<cert>")
    for _i in CLIENT_CERT.decode("UTF-8").split("\n"):
        conn_fragments.insert(-2, _i)
    conn_fragments.insert(-2, "</cert>")

    ovpnConfig = "\n".join(conn_fragments)

    ovpnFile = open(
        f"{REGION_NAME_MAPPING[PROPERTIES['region']]}-{PROPERTIES['friendlyName']}.ovpn",
        "w+",
    )
    ovpnFile.write(ovpnConfig)
    ovpnFile.close()
    print("Done.\n")
    print(
        "Your .ovpn file is: "
        + f"{REGION_NAME_MAPPING[PROPERTIES['region']]}-{PROPERTIES['friendlyName']}.ovpn"
    )


# In the following function, we save the setup result as a file under the CWD for later use,
# that is, to identify the existing VPN endpoint that the user wants to manage.
# Here is the list of attributes one profile has:
# - Region
# - Client VPN Endpoint ID
# - Client VPN Subnet ID
# - Date of Creation
# - Friendly Name of the Deployment
# These data should be stored in Json format.
def save_the_setup_results():
    print("Gathering Deployment attributes...")
    saveTime = int(time.time())
    PROPERTIES["dateOfCreation"] = saveTime
    print("Done.\n")
    print(dumps(PROPERTIES, indent=1))
    print(
        f"Saving the file as '{REGION_NAME_MAPPING[PROPERTIES['region']]}-{PROPERTIES['friendlyName']}.ovpnsetup' ..."
    )
    _f = open(
        f"{REGION_NAME_MAPPING[PROPERTIES['region']]}-{PROPERTIES['friendlyName']}.ovpnsetup",
        "w+",
    )
    _f.write(dumps(PROPERTIES))
    _f.close()
    print("Done.\n")


# *** THE DEPLOYMENT CODE SECTION ENDS ***


def check_commands():
    try:
        print("Searching for git in PATH...")
        subprocess.run(["which", "git"], check=True, stdout=sys.stdout)
    except:
        print(
            "git installation not detected on your computer, please install git and try again.",
            file=sys.stderr,
        )
        traceback.print_exc()
        sys.exit(1)
    else:
        print("git command found in PATH.")
        print("Done.\n")


if __name__ == "__main__":
    print("Copyright 2020-2022 Scott X. Liang")
    print("To contact the author, please send emails to scott.liang@pm.me")
    print(
        "This program is licensed under GNU General Public License Version 3. For more information, please refer to /COPYING."
    )
    if len(sys.argv) > 1:  # To see if the command is present.
        try:
            if get_configuration() == 0:
                client_ec2 = boto3.client("ec2", region_name=PROPERTIES["region"])
                client_acm = boto3.client("acm", region_name=PROPERTIES["region"])
                client_cf = boto3.client(
                    "cloudformation", region_name=PROPERTIES["region"])
            manage()
        except Exception as e:
            print("Errors occured.", file=sys.stderr)
            traceback.print_exc()
    else:  # manage the vpn when there is no commands or options.
        print(
            "No commands or options detected in the command line. Let's setup a brand-new VPN service!"
        )
        check_commands()
        input(
            "Please note that this program will create several temporary & non-temporary files and directories under the current working direcory. \
            Be sure that you have the proper permission to write to the CWD and it is okay for such purposes!\nPlease press any key to proceed. > "
        )
        # Before we initiate the deployment sequence, we need to know the following parameters:
        # - the AWS region where the endpoint will be created. (no Default, mandatory)
        # - the friendly name of this vpn service. (Default: timestampt/UUID)
        # - if the vpn service should be split-tunnelled. (Default: non-split-tunnel)
        # The user will be prompted to speficy these parameters. The job is done within the following function:
        get_properties()
        try:
            client_ec2 = boto3.client("ec2", region_name=PROPERTIES["region"])
            client_acm = boto3.client("acm", region_name=PROPERTIES["region"])
            client_cf = boto3.client(
                "cloudformation", region_name=PROPERTIES["region"])
            generate_credentials()
            download_cloudformation_template(),
            # save the aws-generated private keys at the same time.
            deploy_cloudformation_template()
            download_connection_profile()
            # Insert the generated credential into the .ovpn file.
            save_the_setup_results()
            # If the user chose to enable the VPN endpoint right after the deployment.
        except Exception as e:
            print(
                "Errors occured during the deployment process.\n Program Exits.",
                file=sys.stderr,
            )
            traceback.print_exc()
